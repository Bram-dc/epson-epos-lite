import * as Epson from './functions/enums';
export default class Builder {
    private message;
    private commands;
    halftone: Epson.Halftone;
    brightness: number;
    force: boolean;
    constructor();
    addText(data: string): this;
    addTextLang(lang: string): this;
    addTextAlign(align: Epson.Align): this;
    addTextRotate(rotate: boolean): this;
    addTextLineSpace(linespc: number): this;
    addTextFont(font: Epson.Font): this;
    addTextSmooth(smooth: boolean): this;
    addTextDouble(dw?: boolean, dh?: boolean): this;
    addTextSize(width?: number, height?: number): this;
    addTextStyle(reverse?: boolean, ul?: boolean, em?: boolean, color?: Epson.Color): this;
    addTextPosition(x: number): this;
    addTextVPosition(y: number): this;
    addFeedUnit(unit: number): this;
    addFeedLine(line: number): this;
    addFeed(): this;
    addFeedPosition(pos: Epson.Feed): this;
    addImage(context: any, x: number, y: number, width: number, height: number, color?: Epson.Color, mode?: Epson.Mode): this;
    addLogo(key1: number, key2: number): this;
    addBarcode(data: string, type: Epson.BarcodeType, hri?: Epson.BarcodeHRI, font?: Epson.Font, width?: number, height?: number): this;
    addSymbol(data: string, type: Epson.BarcodeSymbol, level?: Epson.SymbolLevel, width?: number, height?: number, size?: number): this;
    addHLine(x1: number, x2: number, style?: Epson.Line): this;
    addVLineBegin(x: number, style?: Epson.Line): this;
    addVLineEnd(x: number, style?: Epson.Line): this;
    addPageBegin(): this;
    addPageEnd(): this;
    addPageArea(x: number, y: number, width: number, height: number): this;
    addPageDirection(dir: Epson.PageDirection): this;
    addPagEpsonition(x: number, y: number): this;
    addPageLine(x1: number, y1: number, x2: number, y2: number, style?: Epson.Line): this;
    addPageRectangle(x1: number, y1: number, x2: number, y2: number, style?: Epson.Line): this;
    addRotateBegin(): this;
    addRotateEnd(): this;
    addCut(type?: Epson.Cut): this;
    addPulse(drawer?: Epson.Drawer, time?: Epson.Pulse): this;
    addSound(pattern?: Epson.SoundPattern, repeat?: number, cycle?: number): this;
    addLayout(type: Epson.PaperType, width?: number, height?: number, margin_top?: number, margin_bottom?: number, offset_cut?: number, offset_label?: number): this;
    addRecovery(): this;
    addReset(): this;
    addCommand(data: string): this;
    addRaw(data: number[]): this;
    toString(): string;
    toBuffer(): Uint8Array;
}
